# -*- coding: utf-8 -*-
"""EXP6_DMDW.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ya_Ij54zJkxugmnC7xT_HpiODXoIyvRa
"""

n=int(input("Enter number of transactions : "))
tid=[]
data = []
for i in range(n):
  tid.append(input("Enter TID :"))
  data.append(list(input("Enter the values :")))
print(data)

def createC1(data):
  C1=[]
  for i in data:
    for j in i:
      if[j] not in C1:
        C1.append([j])
  C1.sort()
  return C1
createC1(data)

from collections import Counter
# dataset_count=int(input("how many transaction you have"))
# dataset =list()
# for i in range(dataset_count):
#     print("enter",i+1,"transaction data separated by comma(,)")
#     data=input().split(",")
#     dataset.append(data)
dataset=[['M', 'O', 'N', 'K', 'E', 'Y'], ['D', 'O', 'N', 'K', 'E', 'Y'], ['M', 'A', 'K', 'E'], ['M', 'U', 'C', 'K', 'Y'], ['C', 'O', 'O', 'K', 'I', 'E']]
print(dataset);
#finding unique elements in the dataset
tc=[];
flattened_list = [item for sublist in dataset for item in sublist]
unique_list = list(set(flattened_list))
print(unique_list)

#counting eash elemts frequency
c1=dict()
element_frequency = Counter(flattened_list)
for element, frequency in element_frequency.items():
    c1[element]=frequency
print(c1)

#minimum support
# support=float(input("enter minimum support as decimal value"))
support=0.6
min_support_count = support*len(dataset)


# finding l1
l1=dict()
for key, value in c1.items():
  if(value>=min_support_count):
    l1[key] = value
  else:
    continue
print(l1)


#finding c2

from itertools import combinations
c2keys=list(l1.keys())
combinations= list(combinations(c2keys, 2))
combination2=[];

# Print the result
for combination in combinations:
    combination2.append(list(combination))

print(combination2)
l2=dict();
for i in combination2:
  # List of items to check
  items_to_check = i;

  # Count occurrences using list comprehension
  count = sum(all(item in sublist for item in items_to_check) for sublist in dataset)
  if(count>=3):
    l2[tuple(i)]=count;
print(l2)

#c3 combinations
c3combination=[]
for keys,values in l2.items():
  c3combination.append(list(keys))
print(c3combination)


from itertools import combinations, chain
itemsetwith3ele=set()
# Create a flat list from the input_lists
flat_list = list(chain.from_iterable(c3combination))

# Generate all possible combinations of length 3 from the flat list
combinations_3 = list(combinations(flat_list, 3))

# Print the combinations
for combo in combinations_3:
  if(len(set(combo))>=3):
    print(set(combo))